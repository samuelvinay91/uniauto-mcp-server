startCommand:
  type: stdio
  configSchema:
    type: object
    properties:
      server:
        type: object
        properties:
          port:
            type: number
            default: 3000
            description: "Port on which the server runs"
          host:
            type: string
            default: "localhost"
            description: "Host on which the server runs"
        required: ["port", "host"]
      automation:
        type: object
        properties:
          headless:
            type: boolean
            default: false
          browser:
            type: string
            default: "chromium"
          slowMo:
            type: number
            default: 50
      selfHealing:
        type: object
        properties:
          enabled:
            type: boolean
            default: true
          strategies:
            type: array
            items:
              type: string
            default: ["repository", "role", "visual", "text"]
      ai:
        type: object
        properties:
          defaultModel:
            type: string
            description: "Default AI model to use"
        # Note: API Key is now expected as an environment variable (CLAUDE_API_KEY)
        # and is no longer configured via this file.
        # No longer required here as it comes from env var
      logLevel: # Keep logLevel at the root if it's intended to be separate
        type: string
        default: "info"
        enum: ["error", "warn", "info", "debug"]
        description: "Logging level for the server"
    required: ["server", "ai"] # Adjust top-level required fields
  commandFunction: |-
    (config) => ({
      "command": "node",
      "args": [
        "src/index.js"
      ],
      "env": {
        "PORT": config.server.port.toString(),
        "NODE_ENV": "production",
        # CLAUDE_API_KEY will be passed by Smithery from its environment/settings
        "CLAUDE_MODEL": config.ai.defaultModel || "claude-3-7-sonnet-20240229", # Use default if not provided
        "LOG_LEVEL": config.logLevel || "info",
        "LOG_DIR": "logs",
        "HEADLESS": (config.automation && config.automation.headless !== undefined) ? config.automation.headless.toString() : "true", # Handle potential missing automation config
        "BROWSER": "chromium"
      }
    })
